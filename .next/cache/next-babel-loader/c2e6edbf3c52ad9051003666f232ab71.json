{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eddie\\\\Documents\\\\GitHub\\\\tuts-nextjs\\\\netnext\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport Post from '../components/post';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst {\n  CONTENTFUL_SPACE_ID,\n  CONTENTFUL_ACCESS_TOKEN\n} = publicRuntimeConfig;\n\nconst client = require('contentful').createClient({\n  space: CONTENTFUL_SPACE_ID,\n  accessToken: CONTENTFUL_ACCESS_TOKEN\n});\n\nfunction HomePage() {\n  async function fetchEntries() {\n    const entries = await client.getEntries();\n    if (entries.items) return entries.items;\n    console.log(`Error getting Entries for ${contentType.name}.`);\n  }\n\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  useEffect(() => {\n    async function getPosts() {\n      const allPosts = await fetchEntries();\n      setPosts([...allPosts]);\n    }\n\n    getPosts();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Next.js + Contentful\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://css.zeit.sh/v1.css\",\n    type: \"text/css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), posts.length > 0 ? posts.map(p => __jsx(Post, {\n    alt: p.fields.alt,\n    date: p.fields.date,\n    key: p.fields.title,\n    image: p.fields.image,\n    title: p.fields.title,\n    url: p.fields.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })) : null);\n}\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/Eddie/Documents/GitHub/tuts-nextjs/netnext/pages/index.js"],"names":["useEffect","useState","Head","Post","getConfig","publicRuntimeConfig","CONTENTFUL_SPACE_ID","CONTENTFUL_ACCESS_TOKEN","client","require","createClient","space","accessToken","HomePage","fetchEntries","entries","getEntries","items","console","log","contentType","name","posts","setPosts","getPosts","allPosts","length","map","p","fields","alt","date","title","image","url"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,SAAS,EAAzC;AACA,MAAM;AAAEE,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,IAAmDF,mBAAzD;;AAEA,MAAMG,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAAtB,CAAmC;AAC9CC,EAAAA,KAAK,EAAEL,mBADuC;AAE9CM,EAAAA,WAAW,EAAEL;AAFiC,CAAnC,CAAf;;AAKA,SAASM,QAAT,GAAoB;AAChB,iBAAeC,YAAf,GAA8B;AAC1B,UAAMC,OAAO,GAAG,MAAMP,MAAM,CAACQ,UAAP,EAAtB;AACA,QAAID,OAAO,CAACE,KAAZ,EAAmB,OAAOF,OAAO,CAACE,KAAf;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BC,WAAW,CAACC,IAAK,GAA1D;AACH;;AAED,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBtB,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAewB,QAAf,GAA0B;AACtB,YAAMC,QAAQ,GAAG,MAAMX,YAAY,EAAnC;AACAS,MAAAA,QAAQ,CAAC,CAAC,GAAGE,QAAJ,CAAD,CAAR;AACH;;AACDD,IAAAA,QAAQ;AACX,GANQ,EAMN,EANM,CAAT;AAQA,SACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,4BAA5B;AAAyD,IAAA,IAAI,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKKF,KAAK,CAACI,MAAN,GAAe,CAAf,GACKJ,KAAK,CAACK,GAAN,CAAUC,CAAC,IACP,MAAC,IAAD;AACI,IAAA,GAAG,EAAEA,CAAC,CAACC,MAAF,CAASC,GADlB;AAEI,IAAA,IAAI,EAAEF,CAAC,CAACC,MAAF,CAASE,IAFnB;AAGI,IAAA,GAAG,EAAEH,CAAC,CAACC,MAAF,CAASG,KAHlB;AAII,IAAA,KAAK,EAAEJ,CAAC,CAACC,MAAF,CAASI,KAJpB;AAKI,IAAA,KAAK,EAAEL,CAAC,CAACC,MAAF,CAASG,KALpB;AAMI,IAAA,GAAG,EAAEJ,CAAC,CAACC,MAAF,CAASK,GANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADL,GAWK,IAhBV,CADJ;AAoBH;;AAED,eAAerB,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Head from 'next/head';\r\nimport Post from '../components/post';\r\nimport getConfig from 'next/config';\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\nconst { CONTENTFUL_SPACE_ID, CONTENTFUL_ACCESS_TOKEN } = publicRuntimeConfig;\r\n\r\nconst client = require('contentful').createClient({\r\n    space: CONTENTFUL_SPACE_ID,\r\n    accessToken: CONTENTFUL_ACCESS_TOKEN\r\n});\r\n\r\nfunction HomePage() {\r\n    async function fetchEntries() {\r\n        const entries = await client.getEntries();\r\n        if (entries.items) return entries.items;\r\n        console.log(`Error getting Entries for ${contentType.name}.`);\r\n    }\r\n\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getPosts() {\r\n            const allPosts = await fetchEntries();\r\n            setPosts([...allPosts]);\r\n        }\r\n        getPosts();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Next.js + Contentful</title>\r\n                <link rel='stylesheet' href='https://css.zeit.sh/v1.css' type='text/css' />\r\n            </Head>\r\n            {posts.length > 0\r\n                ? posts.map(p => (\r\n                      <Post\r\n                          alt={p.fields.alt}\r\n                          date={p.fields.date}\r\n                          key={p.fields.title}\r\n                          image={p.fields.image}\r\n                          title={p.fields.title}\r\n                          url={p.fields.url}\r\n                      />\r\n                  ))\r\n                : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}