{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Eddie\\\\Documents\\\\GitHub\\\\tuts-nextjs\\\\netnext\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport Post from '../components/post';\nimport getConfig from 'next/config';\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar CONTENTFUL_SPACE_ID = publicRuntimeConfig.CONTENTFUL_SPACE_ID,\n    CONTENTFUL_ACCESS_TOKEN = publicRuntimeConfig.CONTENTFUL_ACCESS_TOKEN;\nvar DEV_SPACE = process.env.CONTENTFUL_SPACE_ID_DEV;\nvar DEV_ACCESS = process.env.CONTENTFUL_ACCESS_TOKEN_DEV;\n\nvar client = require('contentful').createClient({\n  space: CONTENTFUL_SPACE_ID || '0iiyikmirmao',\n  accessToken: CONTENTFUL_ACCESS_TOKEN || DEV_ACCESS\n});\n\nfunction HomePage() {\n  function fetchEntries() {\n    var entries;\n    return _regeneratorRuntime.async(function fetchEntries$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(client.getEntries());\n\n          case 2:\n            entries = _context.sent;\n\n            if (!entries.items) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", entries.items);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n\n  var _useState = useState([]),\n      posts = _useState[0],\n      setPosts = _useState[1];\n\n  useEffect(function () {\n    function getPosts() {\n      var allPosts;\n      return _regeneratorRuntime.async(function getPosts$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetchEntries());\n\n            case 2:\n              allPosts = _context2.sent;\n              setPosts(_toConsumableArray(allPosts));\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n\n    getPosts();\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Next.js + Contentful\"), __jsx(\"link\", {\n    rel: \"stylesheet\",\n    href: \"https://css.zeit.sh/v1.css\",\n    type: \"text/css\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), posts.length > 0 ? posts.map(function (p) {\n    return __jsx(Post, {\n      alt: p.fields.alt,\n      date: p.fields.date,\n      key: p.fields.title,\n      image: p.fields.image,\n      title: p.fields.title,\n      url: p.fields.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }) : null);\n}\n\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/Eddie/Documents/GitHub/tuts-nextjs/netnext/pages/index.js"],"names":["useEffect","useState","Head","Post","getConfig","publicRuntimeConfig","CONTENTFUL_SPACE_ID","CONTENTFUL_ACCESS_TOKEN","DEV_SPACE","process","env","CONTENTFUL_SPACE_ID_DEV","DEV_ACCESS","CONTENTFUL_ACCESS_TOKEN_DEV","client","require","createClient","space","accessToken","HomePage","fetchEntries","getEntries","entries","items","console","log","contentType","name","posts","setPosts","getPosts","allPosts","length","map","p","fields","alt","date","title","image","url"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;iBAEgCA,SAAS,E;IAAjCC,mB,cAAAA,mB;;IACAC,mB,GAAiDD,mB,CAAjDC,mB;IAAqBC,uB,GAA4BF,mB,CAA5BE,uB;AAE7B,IAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAA9B;AACA,IAAMC,UAAU,GAAGH,OAAO,CAACC,GAAR,CAAYG,2BAA/B;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAAtB,CAAmC;AAC9CC,EAAAA,KAAK,EAAEX,mBAAmB,IAAI,cADgB;AAE9CY,EAAAA,WAAW,EAAEX,uBAAuB,IAAIK;AAFM,CAAnC,CAAf;;AAKA,SAASO,QAAT,GAAoB;AAChB,WAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC0BN,MAAM,CAACO,UAAP,EAD1B;;AAAA;AACUC,YAAAA,OADV;;AAAA,iBAEQA,OAAO,CAACC,KAFhB;AAAA;AAAA;AAAA;;AAAA,6CAE8BD,OAAO,CAACC,KAFtC;;AAAA;AAGIC,YAAAA,OAAO,CAACC,GAAR,qCAAyCC,WAAW,CAACC,IAArD;;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AADgB,kBAOU1B,QAAQ,CAAC,EAAD,CAPlB;AAAA,MAOT2B,KAPS;AAAA,MAOFC,QAPE;;AAShB7B,EAAAA,SAAS,CAAC,YAAM;AACZ,aAAe8B,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC2BV,YAAY,EADvC;;AAAA;AACUW,cAAAA,QADV;AAEIF,cAAAA,QAAQ,oBAAKE,QAAL,EAAR;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIAD,IAAAA,QAAQ;AACX,GANQ,EAMN,EANM,CAAT;AAQA,SACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,EAEI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,4BAA5B;AAAyD,IAAA,IAAI,EAAC,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAKKF,KAAK,CAACI,MAAN,GAAe,CAAf,GACKJ,KAAK,CAACK,GAAN,CAAU,UAAAC,CAAC;AAAA,WACP,MAAC,IAAD;AACI,MAAA,GAAG,EAAEA,CAAC,CAACC,MAAF,CAASC,GADlB;AAEI,MAAA,IAAI,EAAEF,CAAC,CAACC,MAAF,CAASE,IAFnB;AAGI,MAAA,GAAG,EAAEH,CAAC,CAACC,MAAF,CAASG,KAHlB;AAII,MAAA,KAAK,EAAEJ,CAAC,CAACC,MAAF,CAASI,KAJpB;AAKI,MAAA,KAAK,EAAEL,CAAC,CAACC,MAAF,CAASG,KALpB;AAMI,MAAA,GAAG,EAAEJ,CAAC,CAACC,MAAF,CAASK,GANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO;AAAA,GAAX,CADL,GAWK,IAhBV,CADJ;AAoBH;;AAED,eAAerB,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Head from 'next/head';\r\nimport Post from '../components/post';\r\nimport getConfig from 'next/config';\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\nconst { CONTENTFUL_SPACE_ID, CONTENTFUL_ACCESS_TOKEN } = publicRuntimeConfig;\r\n\r\nconst DEV_SPACE = process.env.CONTENTFUL_SPACE_ID_DEV;\r\nconst DEV_ACCESS = process.env.CONTENTFUL_ACCESS_TOKEN_DEV;\r\n\r\nconst client = require('contentful').createClient({\r\n    space: CONTENTFUL_SPACE_ID || '0iiyikmirmao',\r\n    accessToken: CONTENTFUL_ACCESS_TOKEN || DEV_ACCESS\r\n});\r\n\r\nfunction HomePage() {\r\n    async function fetchEntries() {\r\n        const entries = await client.getEntries();\r\n        if (entries.items) return entries.items;\r\n        console.log(`Error getting Entries for ${contentType.name}.`);\r\n    }\r\n\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function getPosts() {\r\n            const allPosts = await fetchEntries();\r\n            setPosts([...allPosts]);\r\n        }\r\n        getPosts();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Head>\r\n                <title>Next.js + Contentful</title>\r\n                <link rel='stylesheet' href='https://css.zeit.sh/v1.css' type='text/css' />\r\n            </Head>\r\n            {posts.length > 0\r\n                ? posts.map(p => (\r\n                      <Post\r\n                          alt={p.fields.alt}\r\n                          date={p.fields.date}\r\n                          key={p.fields.title}\r\n                          image={p.fields.image}\r\n                          title={p.fields.title}\r\n                          url={p.fields.url}\r\n                      />\r\n                  ))\r\n                : null}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomePage;\r\n"]},"metadata":{},"sourceType":"module"}